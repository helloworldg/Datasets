{"input": "#task_instruction: Implement a function to detect cycles in a directed graph.", "target_output": "Your task is to implement a function that detects cycles in a directed graph. Use Depth-First Search (DFS) and a recursion stack to identify back edges that indicate a cycle. Ensure the function handles graphs with no cycles and disconnected components. You should only provide the code, without any explanations or additional commentary."}
{"input": "#task_instruction: Write a script to scrape headlines from a news website.", "target_output": "Your task is to write a script that scrapes headlines from a news website. Use an HTTP library to fetch the webpage content and a parsing library to extract headlines based on their HTML tags or class attributes. Handle errors such as failed HTTP requests or invalid HTML structures. You should only provide the code, without any explanations or additional commentary."}
{"input": "#task_instruction: Implement a function to detect cycles in a directed graph.", "target_output": "Your task is to implement a function that detects cycles in a directed graph using graph traversal algorithms such as depth-first search (DFS) with a visited and recursion stack approach. Ensure edge cases like empty graphs, single-node graphs, and disconnected graphs are handled. Write the function in Python and provide only the implementation without additional comments or explanations."}
{"input": "#task_instruction: Write a program to compress and decompress a string.", "target_output": "Your task is to write a program that compresses and decompresses a string using a basic run-length encoding (RLE) method. The compression should replace consecutive duplicate characters with a single instance followed by their count. Ensure edge cases like empty strings and single-character inputs are handled. Write the program in JavaScript and provide only the implementation without additional comments or explanations."}
{"input": "#task_instruction: Optimize a sorting function for extremely large datasets.", "target_output": "Your task is to optimize a sorting function to handle extremely large datasets efficiently. Implement an external sorting technique or utilize optimized algorithms like Merge Sort to minimize memory usage and time complexity. Write the function in C++ and provide only the implementation without additional comments or explanations."}
{"input": "#task_instruction: Debug a Java program for managing database connections.", "target_output": "Your task is to debug a Java program that manages database connections using JDBC. Fix issues like connection leaks, invalid query handling, and unclosed statements. Ensure the program maintains robust error handling and connection pooling. Write the corrected code in Java and provide only the implementation without additional comments or explanations."}
{"input": "#task_instruction: Write a program to calculate the inverse of a matrix.", "target_output": "Your task is to develop a program that calculates the inverse of a given square matrix using Gaussian elimination or other numerical methods. Ensure the program handles edge cases such as non-invertible matrices or invalid inputs. Write the program in Python and provide only the implementation without additional comments or explanations."}
{"input": "#task_instruction: Implement a program to convert JSON data into a CSV file.", "target_output": "Your task is to implement a program that converts JSON data into a CSV file. Parse the JSON input to extract key-value pairs and format them as rows and columns in a CSV format. Handle nested JSON objects and ensure the output is a well-structured CSV file. You should only provide the code, without any explanations or additional commentary."}
{"input": "#task_instruction: Implement a function to validate email addresses.", "target_output": "Your task is to develop a function that validates email addresses to ensure they comply with the standard email format. Use regular expressions to match the structure of email addresses, which must include a local part, an '@' symbol, and a domain part. Ensure the function rejects invalid characters and handles edge cases like missing '@' or malformed domain parts. Write the function in JavaScript and provide only the function code without any additional explanations or comments."}
{"input": "#task_instruction: Optimize a function for matrix multiplication.", "target_output": "Your task is to optimize a matrix multiplication function to improve its performance. Use techniques such as parallel computation or optimized libraries like NumPy to speed up calculations for large matrices. Ensure the implementation maintains numerical accuracy and handles edge cases such as non-square matrices. Write the optimized function in Python and provide only the code, without including comments or further descriptions."}
{"input": "#task_instruction: Create a REST API for user authentication.", "target_output": "Your task is to create a REST API that handles user authentication with username and password. Use bcrypt to securely hash passwords and JSON Web Tokens (JWT) to manage user sessions. Ensure the API includes endpoints for login and registration, and validate inputs to prevent injection attacks. Write the code in Java and provide only the implementation, without adding comments or other details."}
{"input": "#task_instruction: Debug a Python script for handling CSV files.", "target_output": "Your task is to debug a Python script that parses CSV files and extracts data based on column names. Fix issues such as incorrect parsing, missing headers, or unexpected delimiters. Ensure the script handles malformed data gracefully and processes valid rows correctly. Write the corrected code in Python and provide only the updated implementation without additional comments or explanations."}
{"input": "#task_instruction: Perform a security review for a Flask web application.", "target_output": "Your task is to perform a security review of a Flask web application. Address vulnerabilities such as SQL injection, cross-site scripting (XSS), and improper session management. Use input validation, parameterized queries, and secure session handling to mitigate risks. Write the revised code in Python and provide only the updated implementation without any comments or additional descriptions."}
{"input": "#task_instruction: Write a function to generate prime numbers up to a given number.", "target_output": "Your task is to develop a function that generates all prime numbers up to a specified number. Use the Sieve of Eratosthenes algorithm, which marks multiples of each prime starting from 2, and eliminates non-prime numbers efficiently. Ensure the function handles edge cases like non-positive inputs. Write the function in Python and provide only the code, without any explanations or additional commentary."}
{"input": "#task_instruction: Debug a JavaScript function that calculates the sum of an array.", "target_output": "Your task is to debug a function that calculates the sum of elements in an array. Use input validation to check for valid numeric values and flatten nested arrays if necessary. Ensure the function handles edge cases like empty arrays and filters out non-numeric values. Write the corrected function in JavaScript and provide only the code, without any explanations or additional commentary."}
{"input": "#task_instruction: Create a program to read and write JSON files.", "target_output": "Your task is to write a program that reads and writes JSON files. Use JSON parsing libraries to load data from an input file, process it, and write the output to another file. Implement exception handling to catch errors such as missing files, invalid JSON format, and write failures. Write the program in Java and provide only the code, without any explanations or additional commentary."}
{"input": "#task_instruction: Optimize a function to find the shortest path in a graph.", "target_output": "Your task is to optimize a function to compute the shortest path in a weighted graph. Use Dijkstra's algorithm with a priority queue to efficiently process graph nodes and update distances. Ensure the implementation handles edge cases like disconnected nodes or empty graphs. Write the function in C++ and provide only the code, without any explanations or additional commentary."}
{"input": "#task_instruction: Perform a security review for an authentication token generation system.", "target_output": "Your task is to conduct a security review for an authentication token generation system. Use cryptographically secure random number generators for token creation and enforce expiration policies. Fix vulnerabilities related to predictable tokens, improper storage, or missing validation for token reuse. Write the revised code in Python and provide only the code, without any explanations or additional commentary."}
{"input": "#task_instruction: Implement a function to check if a string is a palindrome.", "target_output": "Your task is to develop a function that checks if a given string is a palindrome. Use two-pointer techniques to compare characters from both ends of the string while ignoring case sensitivity and non-alphanumeric characters. Handle edge cases such as empty strings or strings with only special characters. Write the function in Java and provide only the function code without additional comments or explanations."}
{"input": "#task_instruction: Debug a C++ program that calculates factorial values.", "target_output": "Your task is to debug a program that calculates the factorial of a given number. Ensure the program correctly handles edge cases such as zero and negative inputs by returning appropriate error values. Optimize the function to prevent integer overflow for large inputs. Write the corrected program in C++ and provide only the function code without any explanations or additional comments."}
{"input": "#task_instruction: Optimize a function to calculate the Fibonacci sequence.", "target_output": "Your task is to optimize a function that calculates Fibonacci numbers. Use dynamic programming techniques to reduce redundant calculations and improve efficiency. Ensure the function handles large inputs correctly without performance degradation. Write the function in JavaScript and provide only the optimized code without explanations or comments."}
{"input": "#task_instruction: Perform a security review for a password reset system.", "target_output": "Your task is to conduct a security review for a password reset system. Use secure token generation methods and enforce strong validation checks for inputs. Address vulnerabilities such as insecure token generation and exposure of sensitive information. Write the revised code in Java and provide only the function code without adding explanations or comments."}
{"input": "#task_instruction: Review a function that sorts an array of integers.", "target_output": "Your task is to develop a function that sorts an array of integers in ascending order. Use a stable sorting algorithm like Merge Sort to ensure predictable output for duplicate values. Handle edge cases such as empty arrays and arrays with duplicate values. Write the function in Python and provide only the code without additional comments or explanations."}
{"input": "#task_instruction: Implement a function to find the largest element in an array.", "target_output": "Your task is to develop a function that finds the largest element in a given array. Use a linear search approach to identify the maximum value efficiently. Ensure the function handles edge cases such as empty arrays and arrays with duplicate maximum values. Write the function in JavaScript and provide only the function code without additional comments or explanations."}
{"input": "#task_instruction: Debug a Java program that processes user input.", "target_output": "Your task is to debug a Java program that processes user input and stores the data in a list. Fix issues such as incorrect handling of invalid or empty inputs, and ensure the program validates inputs efficiently. Write the corrected program in Java and provide only the function code without additional explanations or comments."}
{"input": "#task_instruction: Optimize a sorting algorithm for a large dataset.", "target_output": "Your task is to optimize a sorting algorithm for a large dataset. Use an efficient algorithm such as quicksort or merge sort, ensuring the implementation handles large inputs effectively. Focus on achieving optimal time complexity and minimal memory usage. Write the function in C++ and provide only the optimized code without explanations or comments."}
{"input": "#task_instruction: Perform a security review for a file upload system.", "target_output": "Your task is to conduct a security review for a file upload system. Address vulnerabilities such as insufficient file type validation, lack of file size restrictions, and insecure storage paths. Provide fixes that ensure only valid files are uploaded and stored securely. Write the revised code in Python and provide only the implementation without adding comments or explanations."}
{"input": "#task_instruction: Write a program to calculate the transpose of a matrix.", "target_output": "Your task is to develop a program that calculates the transpose of a given matrix. Use nested loops to swap rows with columns and ensure the program handles edge cases such as empty matrices or non-square matrices. Write the program in JavaScript and provide only the function code without additional comments or explanations."}
{"input": "#task_instruction: Implement a function to find the longest common substring between two strings.", "target_output": "Your task is to develop a function that finds the longest common substring between two given strings. Use a dynamic programming approach to build a table that tracks matching characters. Optimize the function to handle large inputs efficiently and address edge cases like empty strings or no common substring. Write the function in Java and provide only the function code without additional comments or explanations."}
{"input": "#task_instruction: Debug a Python script that calculates the mean and median of a dataset.", "target_output": "Your task is to debug a Python script that calculates the mean and median of a dataset. Fix issues like incorrect handling of empty datasets, invalid data types, and edge cases with single-element datasets. Ensure the script handles numeric inputs robustly. Write the corrected script in Python and provide only the function code without additional comments or explanations."}
{"input": "#task_instruction: Perform a security review for a user registration form.", "target_output": "Your task is to conduct a security review for a user registration form. Address vulnerabilities like weak password enforcement, lack of email validation, and susceptibility to SQL injection. Implement fixes to validate inputs, enforce strong password rules, and sanitize database queries. Write the revised code in JavaScript and provide only the implementation without additional comments or explanations."}
{"input": "#task_instruction: Write a program to rotate a 2D array by 90 degrees.", "target_output": "Your task is to develop a program that rotates a given 2D array by 90 degrees clockwise. Use matrix manipulation techniques to swap rows and columns iteratively. Handle edge cases like empty arrays and non-square matrices effectively. Write the program in Python and provide only the function code without additional comments or explanations."}
{"input": "#task_instruction: Implement a function to check if a binary tree is balanced.", "target_output": "Your task is to develop a function that checks if a given binary tree is balanced. Use a depth-first search approach to compute subtree heights and verify that the height difference between the left and right subtrees of any node does not exceed one. Write the function in C++ and provide only the function code without additional comments or explanations."}
{"input": "#task_instruction: Debug a JavaScript function that validates JSON strings.", "target_output": "Your task is to debug a JavaScript function that validates JSON strings. Use JSON parsing methods to detect invalid JSON formats and implement checks for unexpected data types. Ensure the function handles edge cases such as null values and deeply nested structures. Write the corrected function in JavaScript and provide only the implementation without additional comments or explanations."}
{"input": "#task_instruction: Optimize a function to find the shortest path in a graph.", "target_output": "Your task is to optimize a function that finds the shortest path in a weighted graph using Dijkstra's algorithm. Utilize data structures like priority queues to enhance performance and handle edge cases such as disconnected nodes or negative weights. Write the function in Java and provide only the optimized code without explanations or comments."}
{"input": "#task_instruction: Perform a security review for an API key management system.", "target_output": "Your task is to conduct a security review for an API key management system. Address vulnerabilities such as insecure key storage, lack of proper access restrictions, and insufficient key rotation policies. Implement cryptographically secure storage methods and enforce strict key usage policies. Write the revised code in Python and provide only the implementation without additional comments or explanations."}
{"input": "#task_instruction: Write a program to find all permutations of a given string.", "target_output": "Your task is to develop a program that generates all permutations of a given string. Use recursive backtracking to construct permutations and handle edge cases like empty strings and duplicate characters efficiently. Write the program in JavaScript and provide only the function code without additional comments or explanations."}
{"input": "#task_instruction: Implement a function to calculate the greatest common divisor (GCD) of two integers.", "target_output": "Your task is to develop a function that calculates the greatest common divisor (GCD) of two given integers using the Euclidean algorithm. Ensure the function handles edge cases such as negative integers and zero inputs robustly. Write the function in Python and provide only the function code without additional comments or explanations."}
{"input": "#task_instruction: Debug a Java program that implements a stack data structure.", "target_output": "Your task is to debug a Java program that implements a stack data structure. Ensure proper handling of stack underflow and overflow conditions by validating push and pop operations. Verify that all standard stack operations (push, pop, peek, isEmpty) work correctly and efficiently. Write the corrected program in Java and provide only the implementation without additional comments or explanations."}
{"input": "#task_instruction: Optimize a function to merge two sorted arrays.", "target_output": "Your task is to optimize a function that merges two sorted arrays into a single sorted array. Use a two-pointer technique to achieve linear time complexity and handle edge cases such as empty arrays or arrays of different lengths. Write the function in C++ and provide only the optimized code without additional comments or explanations."}
{"input": "#task_instruction: Perform a security review for a session management system.", "target_output": "Your task is to conduct a security review for a session management system. Address vulnerabilities such as session fixation, improper cookie security attributes (e.g., HttpOnly and Secure flags), and missing session expiration mechanisms. Implement fixes to ensure robust session handling. Write the revised code in Python and provide only the implementation without additional comments or explanations."}
{"input": "#task_instruction: Write a program to implement a basic calculator for arithmetic expressions.", "target_output": "Your task is to develop a program that implements a basic calculator for arithmetic expressions, supporting operations like addition, subtraction, multiplication, and division. Use a stack-based approach to evaluate expressions and ensure edge cases like division by zero or invalid inputs are handled. Write the program in JavaScript and provide only the function code without additional comments or explanations."}
{"input": "#task_instruction: Debug a Python function that processes log files.", "target_output": "Your task is to debug a Python function that processes log files to extract error messages and warnings. Ensure the function handles edge cases like missing log entries, corrupted files, or inconsistent formatting. Write the corrected function in Python and provide only the implementation without additional comments or explanations."}
{"input": "#task_instruction: Implement a function to reverse a linked list.", "target_output": "Your task is to implement a function that reverses a singly linked list. Use iterative or recursive techniques, and ensure the function handles edge cases such as an empty list or a single-node list. Write the function in Java and provide only the implementation without additional comments or explanations."}
{"input": "#task_instruction: Optimize a function to search for an element in a rotated sorted array.", "target_output": "Your task is to optimize a function that searches for an element in a rotated sorted array. Use a modified binary search algorithm to achieve O(log n) complexity. Handle edge cases like duplicates or empty arrays. Write the function in C++ and provide only the optimized code without additional comments or explanations."}
{"input": "#task_instruction: Perform a security review for an email-sending module.", "target_output": "Your task is to conduct a security review for an email-sending module. Identify vulnerabilities such as improper input sanitization, insecure SMTP connections, and missing rate-limiting mechanisms. Provide fixes to address these issues. Write the revised code in Python and provide only the implementation without additional comments or explanations."}
{"input": "#task_instruction: Write a program to simulate a basic vending machine.", "target_output": "Your task is to develop a program that simulates a basic vending machine. Implement functionality for selecting items, inserting coins, and returning change. Ensure the program handles invalid inputs, insufficient funds, and out-of-stock items. Write the program in JavaScript and provide only the function code without additional comments or explanations."}
{"input": "#task_instruction: Debug a Python script for handling API requests.", "target_output": "Your task is to debug a Python script that makes API requests and processes the responses. Use the 'requests' library to handle HTTP methods, and implement error handling for common issues such as connection timeouts, HTTP errors, and invalid JSON responses. Write the corrected script in Python and provide only the implementation without additional comments or explanations."
{"input": "#task_instruction: Optimize a function to calculate the sum of all even numbers in a large array.", "target_output": "Your task is to optimize a function that calculates the sum of all even numbers in a large array. Use filtering methods like 'if' conditions within a single loop or apply vectorized operations with libraries such as NumPy for higher performance. Ensure the function processes large datasets efficiently. Write the function in Java and provide only the implementation without additional comments or explanations."}
{"input": "#task_instruction: Perform a security review for a user login system.", "target_output": "Your task is to conduct a security review for a user login system. Identify and fix issues such as storing passwords securely using hashing algorithms like bcrypt, implementing rate-limiting to prevent brute-force attacks, and ensuring secure session handling with HttpOnly cookies. Write the revised code in Python and provide only the implementation without additional comments or explanations."}
{"input": "#task_instruction: Write a program to generate a histogram from a text file.", "target_output": "Your task is to develop a program that reads a text file and generates a histogram of word frequencies. Use a dictionary to map words to their counts and preprocess the text by converting it to lowercase and stripping punctuation using regular expressions. Handle edge cases such as empty files or special characters. Write the program in Java and provide only the implementation without additional comments or explanations."}
{"input": "#task_instruction: Debug a JavaScript function that manipulates DOM elements.", "target_output": "Your task is to debug a JavaScript function that adds, removes, or modifies DOM elements dynamically. Identify and fix issues like incorrect element selection, unhandled errors when elements are missing, and performance concerns when handling large DOM updates. Test the function with multiple scenarios to ensure it works reliably. Write the corrected function in JavaScript and provide only the implementation without additional comments or explanations."}
{"input": "#task_instruction: Perform a security review for a file upload system.", "target_output": "Your task is to conduct a security review for a file upload system. Ensure that file type validation checks extensions and MIME types, set strict file size limits, and securely store files outside publicly accessible directories. Add mechanisms to sanitize file names and restrict executable file uploads. Write the revised code in Python and provide only the implementation without additional comments or explanations."}
{"input": "#task_instruction: Implement a function to shuffle an array randomly.", "target_output": "Your task is to write a function that shuffles an array randomly. Use the Fisher-Yates algorithm for unbiased randomization and ensure the function modifies the original array. Test the function with arrays of various sizes, including empty and single-element arrays. Write the function in JavaScript and provide only the implementation without additional comments or explanations."}






